doctype html
html(lang='en')
	head
		title Exam list
		script.
			var server = !{script_vars};
		include common.pug
		script.
			$(function(){
				var formatDate = function(date){
					if(+date == 0)
						return '';
					return (date.getFullYear()+543)+'/'+(date.getMonth()+1)+'/'+date.getDate()+' '+date.toTimeString().substring(0,5);
				};
				var parseDate = function(str){
					if(typeof str == 'string'){
						if(str == '') return new Date(0);
						var date_component, time_component;
						for(let component of str.split(' ')){
							let r;
							if(r = component.match('^(\\d{1,2})-(\\d{1,2})-(\\d{1,4})$')){
								date_component = [r[3],r[2],r[1]];
								continue;
							}
							if(r = component.match('^(\\d{1,4})-(\\d{1,2})-(\\d{1,2})$')){
								date_component = [r[1],r[2],r[3]];
								continue;
							}
							if(r = component.match('^(\\d{1,2})/(\\d{1,2})/(\\d{1,4})$')){
								date_component = [r[3],r[2],r[1]];
								continue;
							}
							if(r = component.match('^(\\d{1,4})/(\\d{1,2})/(\\d{1,2})$')){
								date_component = [r[1],r[2],r[3]];
								continue;
							}
							if(r = component.match('^(\\d{1,2}):(\\d{1,2})(?::\\d{1,2})?$')){
								time_component = [r[1],r[2]];
								continue;
							}
						}
						if(date_component && time_component){
							return new Date(date_component[0]-543, date_component[1]-1, date_component[2], time_component[0], time_component[1]);
						}
					}
					return new Date(str);
				};
				window.app = new Vue({ // remove window
					el: '#app',
					data : {
						searchbar: '',
						start_time: 0,
						start_time_field: '',
						duration_field: '',
						problem_time_field: '',
						title_field: '',
						enable_field: 0,
						shuffle_field: 0,
						instruction_field: '',
						store: server.quiz
					},
					methods: {
						// TODO: error handling
						validateIntOrNull: function(val){
							return /^\d*$/.test(val);
						},
						setStartTime: function(val, inhibit_calendar){
							if(!(val instanceof Date))
								val = parseDate(val);
							if(isNaN(val)) return true;
							this.start_time = val;
							this.start_time_field = formatDate(val);
							$('.ui.calendar').calendar('set date', +val == 0?(new Date()):val, false, !inhibit_calendar);
						},
						deleteModal: function(){
							$('#delete-confirm').modal({
								duration: 100,
								onApprove: function(){
									$.post({
										url: '/admin/api_quiz_delete',
										data: {
											quiz_id: server.quiz.quiz_id
										},
										success: function(resp){
											location.href = '/admin/quiz_list';
										},
										dataType: 'json'
									});
								}
							}).modal('show');
						},
						saveForm: function(){
							if(this.has_error) return;
							this.fieldToData();
							var self = this;
							$.post({
								url: '/admin/api_quiz_edit',
								data: this.store,
								success: function(resp){
									if('quiz' in resp){
										self.store = resp.quiz;
										self.fieldFromData();
										$('#form .ui.success.dimmer').dimmer('show');
									}
								},
								dataType: 'json'
							});
						},
						resetForm: function(){
							this.fieldFromData();
						},
						fieldFromData: function(quiz){
							this.setStartTime(new Date((+this.store.start_time) * 1000));
							this.duration_field = +this.store.duration||'';
							this.problem_time_field = +this.store.problem_time||'';
							this.title_field = this.store.title;
							this.enable_field = +this.store.enable;
							this.shuffle_field = +this.store.shuffle_flag;
							this.instruction_field = this.store.instruction;
						},
						fieldToData: function(){
							this.store.start_time = Math.round(+this.start_time/1000);
							this.store.duration = +this.duration_field;
							this.store.problem_time = +this.problem_time_field;
							this.store.title = this.title_field;
							this.store.enable = +this.enable_field;
							this.store.shuffle_flag = +this.shuffle_field;
							this.store.instruction = this.instruction_field;
						},
					},
					created: function() {
						this.fieldFromData();
					},
					computed: {
						title_error: function(){
							return this.title_field=='';
						},
						calendar_error: function(){
							return isNaN(parseDate(this.start_time_field));
						},
						duration_error: function(){
							return !this.validateIntOrNull(this.duration_field);
						},
						problem_time_error: function(){
							return !this.validateIntOrNull(this.problem_time_field);
						},
						has_error: function(){
							return this.title_error || this.calendar_error || this.duration_error || this.problem_time_error;
						},
					}
				});
				$('#form .ui.calendar').calendar({
					ampm: false,
					selector: {
						input: 'input.data',
						activator: 'input.activator',
					},
					onChange: function(val){
						if(+app.start_time != +val)
							app.setStartTime(val, true);
					},
					formatter:{
						dayHeader: function (date, settings) {
							return settings.text.months[date.getMonth()] + ' ' + (date.getFullYear()+543);
						},
						monthHeader: function (date, settings) {
							return date.getFullYear()+543;
						},
						yearHeader: function (date, settings) {
							var decadeYear = Math.ceil(date.getFullYear() / 10) * 10;
							return (decadeYear - 9 + 543) + ' - ' + (decadeYear + 2 + 543);
						},
						date: function (date, settings) {
							if (!date) 
								return '';
							return date.getDate() + ' ' + settings.text.months[date.getMonth()]; + ' ' + (date.getFullYear()+543);
						},
						cell: function (cell, date, cellOptions) {
							if(cellOptions.mode == 'year')
								cell.text(date.getFullYear()+543);
						}
					},
					text: {
						days: ['อา', 'จ', 'อ', 'พ', 'พฤ', 'ศ', 'ส'],
						months: ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'],
						monthsShort: ['ม.ค.', 'ก.พ.', 'มี.ค.', 'เม.ย.', 'พ.ค.', 'มิ.ย.', 'ก.ค.', 'ส.ค.', 'ก.ย.', 'ต.ค.', 'พ.ย.', 'ธ.ค.']
					}
				});
				app.setStartTime(app.start_time, true);
				$('.ui.checkbox').checkbox();
				$('.ui.dimmer').dimmer({
					duration:{
						show : 100,
						hide : 100
					}
				});
			});
	body
		#app
			.ui.mini.modal#delete-confirm
				.header
					i.trash.alternate.icon
					| Delete Confirmation
				.content
					| ถ้าหากลบแล้วจะไม่สามารถ เรียกคืนข้อมูลได้
				.actions
					.ui.red.cancel.button Cancel
					.ui.green.ok.button Delete
			nav.ui.fixed.navbar.menu
				.item
					.ui.breadcrumb
						a.section(href='/admin/quiz_list') Quiz List
						i.right.arrow.icon.divider
						.active.section {{title_field}}
				.right.menu
					a.item(href='/admin/logout') Logout
			main.ui.grid.container
				.column
					.ui.grid
						.six.wide.column
							.ui.segment
								h2.ui.dividing.header Action
								p
									a.ui.labeled.icon.button.big.teal(href="/admin/problems/"+quiz_id)
										i.edit.icon
										| คำถาม
								p
									a.ui.labeled.icon.button.big.teal(href="/admin/examinee/"+quiz_id)
										i.user.icon
										| รายชื่อผู้เข้าสอบ
								p
									a.ui.labeled.icon.button.big.teal(href="/admin/scores/"+quiz_id)
										i.download.icon
										| ดาวน์โหลดคะแนน
						.ten.wide.column
							.ui.segment.form#form
								h2.ui.dividing.header รายละเอียด
								.field(:class="{error:title_error}")
									label ชื่อข้อสอบ
									input(type="text",v-model="title_field",placeholder="ชื่อข้อสอบ")
								.field(:class="{error:calendar_error}")
									label วันที่/เวลาเริ่มสอบ
									.ui.calendar
										.ui.input.left.right.icon
											i.calendar.left.icon
											input.activator(type="text", placeholder="ไม่กำหนด", v-model="start_time_field", @change="setStartTime(start_time_field)")
											i.close.link.right.icon(@click="setStartTime(0, true)", v-show="start_time_field")
											input.data(type="hidden")
								.fields
									.eight.wide.field(:class="{error:duration_error}")
										label Duration (นาที)
										.ui.icon.input
											input(type="text",v-model="duration_field",placeholder="ไม่จำกัด")
											i.close.link.icon(v-show="duration_field", @click="duration_field=''")
									.eight.wide.field(:class="{error:problem_time_error}")
										label เวลาต่อข้อ (วินาที)
										.ui.input.icon
											input(type="text",v-model="problem_time_field",placeholder="ไม่จำกัด")
											i.close.link.icon(v-show="problem_time_field", @click="problem_time_field=''")
								.fields
									.field
										.ui.toggle.checkbox
											input(type="checkbox",v-model="enable_field")
											label เปิดใช้งาน
									.field
										.ui.toggle.checkbox
											input(type="checkbox",v-model="shuffle_field")
											label สุ่มลำดับคำถาม
								.field
									label คำชี้แจง
									textarea(v-model="instruction_field",placeholder="คำชี้แจง")
								.ui.big.breadcrumb
									.section
										button.ui.primary.button(:class="{disabled:has_error}",@click="saveForm") Save
									.divider
									.section
										button.ui.button(@click="resetForm") Reset
									.divider
										| &emsp;|&emsp;
									.section
										button.ui.red.button(@click="deleteModal") Delete
								.ui.success.dimmer
									.content
										h2.ui.inverted.icon.header
											i.check.icon
											| Saved